# Cursor Rules for TienNHM Docusaurus Blog

## ⚠️ IMPORTANT: Migration Notice
This `.cursorrules` file is **LEGACY** format and will be deprecated.
**NEW**: Use Project Rules in `.cursor/rules/` directory instead.

## Project Rules Structure (Recommended)
```
.cursor/rules/
├── docusaurus-blog.mdc      # Main project standards
├── blog-posts.mdc          # Blog writing guidelines  
├── components.mdc          # React component standards
└── i18n.mdc               # Internationalization rules
```

## Quick Access
- **Main Rules**: @.cursor/rules/docusaurus-blog.mdc
- **Blog Posts**: @.cursor/rules/blog-posts.mdc
- **Components**: @.cursor/rules/components.mdc
- **i18n**: @.cursor/rules/i18n.mdc

## Legacy Content (For Reference Only)
This content is now maintained in the Project Rules above.

### Project Overview
Personal blog built with Docusaurus v3.8.1 featuring multi-language support, MDX, PWA, and mobile app capabilities.

### Technology Stack
- **Framework**: Docusaurus 3.8.1
- **Language**: TypeScript/JavaScript
- **Styling**: CSS Modules, SASS, PrimeReact components
- **Content**: MDX, Markdown
- **Mobile**: Capacitor for Android/iOS
- **Search**: Algolia
- **Analytics**: Google Tag Manager, Google Analytics

### File Structure Conventions
- Blog posts: `blog/YYYY/YYYY-MM-DD-post-title/`
- Documentation: `docs/` with category-based organization
- Components: `src/components/` with index files
- Pages: `src/pages/` for custom pages
- Styles: CSS modules with `.module.css` naming
- Images: `static/img/` organized by category

### Coding Standards
- Use TypeScript for new components and utilities
- Prefer functional components with hooks
- Use proper type annotations for props and state
- Follow React best practices and hooks guidelines
- Use CSS Modules for component-specific styles
- Follow BEM-like naming conventions
- Use CSS custom properties for theming
- Responsive design with mobile-first approach

### Content Writing
- Blog posts in Vietnamese (default) and English
- Use MDX for interactive content
- Include proper frontmatter with metadata
- Use descriptive headings and proper markdown syntax
- Include code examples with syntax highlighting

### Docusaurus-Specific Guidelines
- Use descriptive filenames with dates
- Include proper frontmatter (title, description, tags, author)
- Use images from `static/img/` directory
- Implement proper SEO metadata
- Support both Vietnamese (vi) and English (en) locales
- Use ideal-image plugin for image optimization
- Test PWA functionality and mobile responsiveness

### Development Workflow
1. Create new blog posts in appropriate year/month folders
2. Update sidebar configuration for new documentation
3. Test responsive design on mobile devices
4. Verify internationalization support
5. Check SEO and accessibility compliance
6. Test PWA functionality
7. Validate build and deployment process

### Common Patterns
- Use `clsx` for conditional CSS classes
- Implement proper error handling and loading states
- Use React hooks for state management
- Follow Docusaurus plugin and theme conventions
- Maintain consistent file naming and organization

### Dependencies
- Keep Docusaurus and related plugins updated
- Use compatible versions of React and TypeScript
- Maintain security updates for all packages
- Document any custom plugin configurations

### Deployment
- GitHub Pages deployment configuration
- Environment variables for API keys and services
- Proper build and serve scripts
- Mobile app builds via Capacitor

### Notes
- This is a personal blog with professional content
- Focus on developer tools, coding tutorials, and technical insights
- Maintain high code quality and documentation standards
- Regular content updates and maintenance required

## Migration Steps
1. **Keep using this file temporarily** - it still works
2. **Start using Project Rules** - they provide better organization
3. **Remove this file** - once you're comfortable with Project Rules
4. **Update Cursor** - ensure you have the latest version for full Project Rules support

## Benefits of Project Rules
- ✅ Better organization and scoping
- ✅ Version-controlled rules
- ✅ Automatic file pattern matching
- ✅ Nested rule support
- ✅ Better IDE integration
- ✅ Future-proof (recommended by Cursor team)
