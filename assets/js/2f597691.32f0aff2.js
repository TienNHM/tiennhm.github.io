"use strict";(self.webpackChunktiennhm_github_io=self.webpackChunktiennhm_github_io||[]).push([[4384],{28453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>c});var t=i(96540);const a={},s=t.createContext(a);function r(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(s.Provider,{value:e},n.children)}},73717:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});var t=i(88023),a=i(74848),s=i(28453);const r={title:"Gi\u1edbi thi\u1ec7u RabbitMQ - Message Broker m\u1ea1nh m\u1ebd",slug:"introduction-to-rabbitmq",description:"T\xecm hi\u1ec3u v\u1ec1 RabbitMQ, m\u1ed9t message broker ph\u1ed5 bi\u1ebfn trong ki\u1ebfn tr\xfac microservices. B\xe0i vi\u1ebft bao g\u1ed3m kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n, c\xe0i \u0111\u1eb7t v\xe0 v\xed d\u1ee5 th\u1ef1c t\u1ebf v\u1edbi .NET 9.",tags:["rabbitmq","dotnet","microservices","message-broker","net9","csharp"],authors:["tiennhm"],date:new Date("2025-08-23T00:00:00.000Z")},c="Gi\u1edbi thi\u1ec7u RabbitMQ - Message Broker m\u1ea1nh m\u1ebd",l={authorsImageUrls:[void 0]},o=[{value:"RabbitMQ l\xe0 g\xec?",id:"rabbitmq-l\xe0-g\xec",level:2},{value:"C\xe1c kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n",id:"c\xe1c-kh\xe1i-ni\u1ec7m-c\u01a1-b\u1ea3n",level:3},{value:"C\xe0i \u0111\u1eb7t RabbitMQ",id:"c\xe0i-\u0111\u1eb7t-rabbitmq",level:2},{value:"S\u1eed d\u1ee5ng Docker (Khuy\u1ebfn ngh\u1ecb)",id:"s\u1eed-d\u1ee5ng-docker-khuy\u1ebfn-ngh\u1ecb",level:3},{value:"C\xe0i \u0111\u1eb7t tr\u1ef1c ti\u1ebfp",id:"c\xe0i-\u0111\u1eb7t-tr\u1ef1c-ti\u1ebfp",level:3},{value:"V\xed d\u1ee5 \u1ee9ng d\u1ee5ng .NET 9",id:"v\xed-d\u1ee5-\u1ee9ng-d\u1ee5ng-net-9",level:2},{value:"1. T\u1ea1o project .NET 9",id:"1-t\u1ea1o-project-net-9",level:3},{value:"2. T\u1ea1o Producer (\u1ee8ng d\u1ee5ng g\u1eedi message)",id:"2-t\u1ea1o-producer-\u1ee9ng-d\u1ee5ng-g\u1eedi-message",level:3},{value:"3. T\u1ea1o Consumer (\u1ee8ng d\u1ee5ng nh\u1eadn message)",id:"3-t\u1ea1o-consumer-\u1ee9ng-d\u1ee5ng-nh\u1eadn-message",level:3},{value:"4. S\u1eed d\u1ee5ng Exchange v\xe0 Routing",id:"4-s\u1eed-d\u1ee5ng-exchange-v\xe0-routing",level:3},{value:"5. Consumer cho t\u1eebng lo\u1ea1i message",id:"5-consumer-cho-t\u1eebng-lo\u1ea1i-message",level:3},{value:"C\xe1c t\xednh n\u0103ng n\xe2ng cao",id:"c\xe1c-t\xednh-n\u0103ng-n\xe2ng-cao",level:2},{value:"1. Message Persistence",id:"1-message-persistence",level:3},{value:"2. Acknowledgment",id:"2-acknowledgment",level:3},{value:"3. Dead Letter Exchange",id:"3-dead-letter-exchange",level:3},{value:"L\u1ee3i \xedch c\u1ee7a RabbitMQ",id:"l\u1ee3i-\xedch-c\u1ee7a-rabbitmq",level:2},{value:"K\u1ebft lu\u1eadn",id:"k\u1ebft-lu\u1eadn",level:2}];function g(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"RabbitMQ l\xe0 m\u1ed9t trong nh\u1eefng message broker ph\u1ed5 bi\u1ebfn nh\u1ea5t trong th\u1ebf gi\u1edbi ph\xe1t tri\u1ec3n ph\u1ea7n m\u1ec1m hi\u1ec7n \u0111\u1ea1i. Trong b\xe0i vi\u1ebft n\xe0y, ch\xfang ta s\u1ebd t\xecm hi\u1ec3u v\u1ec1 RabbitMQ v\xe0 c\xe1ch s\u1eed d\u1ee5ng n\xf3 trong \u1ee9ng d\u1ee5ng .NET 9."}),"\n",(0,a.jsx)(e.h2,{id:"rabbitmq-l\xe0-g\xec",children:"RabbitMQ l\xe0 g\xec?"}),"\n",(0,a.jsx)(e.p,{children:"RabbitMQ l\xe0 m\u1ed9t open-source message broker (c\xf2n g\u1ecdi l\xe0 message queue) \u0111\u01b0\u1ee3c ph\xe1t tri\u1ec3n b\u1edfi Rabbit Technologies. N\xf3 h\u1ed7 tr\u1ee3 nhi\u1ec1u messaging protocols nh\u01b0 AMQP, MQTT, STOMP v\xe0 HTTP th\xf4ng qua c\xe1c plugins."}),"\n",(0,a.jsx)(e.h3,{id:"c\xe1c-kh\xe1i-ni\u1ec7m-c\u01a1-b\u1ea3n",children:"C\xe1c kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Producer"}),": \u1ee8ng d\u1ee5ng g\u1eedi message"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Consumer"}),": \u1ee8ng d\u1ee5ng nh\u1eadn v\xe0 x\u1eed l\xfd message"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Queue"}),": N\u01a1i l\u01b0u tr\u1eef message"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Exchange"}),": Nh\u1eadn message t\u1eeb producer v\xe0 \u0111\u1ecbnh tuy\u1ebfn \u0111\u1ebfn queue"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Binding"}),": Quy t\u1eafc k\u1ebft n\u1ed1i exchange v\u1edbi queue"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Routing Key"}),": Kh\xf3a \u0111\u1ec3 exchange \u0111\u1ecbnh tuy\u1ebfn message"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"c\xe0i-\u0111\u1eb7t-rabbitmq",children:"C\xe0i \u0111\u1eb7t RabbitMQ"}),"\n",(0,a.jsx)(e.h3,{id:"s\u1eed-d\u1ee5ng-docker-khuy\u1ebfn-ngh\u1ecb",children:"S\u1eed d\u1ee5ng Docker (Khuy\u1ebfn ngh\u1ecb)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Sau khi ch\u1ea1y, b\u1ea1n c\xf3 th\u1ec3 truy c\u1eadp RabbitMQ Management UI t\u1ea1i: ",(0,a.jsx)(e.code,{children:"http://localhost:15672"})," (username/password: guest/guest)"]}),"\n",(0,a.jsx)(e.h3,{id:"c\xe0i-\u0111\u1eb7t-tr\u1ef1c-ti\u1ebfp",children:"C\xe0i \u0111\u1eb7t tr\u1ef1c ti\u1ebfp"}),"\n",(0,a.jsxs)(e.p,{children:["T\u1ea3i v\xe0 c\xe0i \u0111\u1eb7t t\u1eeb ",(0,a.jsx)(e.a,{href:"https://www.rabbitmq.com/download.html",children:"rabbitmq.com"})]}),"\n",(0,a.jsx)(e.h2,{id:"v\xed-d\u1ee5-\u1ee9ng-d\u1ee5ng-net-9",children:"V\xed d\u1ee5 \u1ee9ng d\u1ee5ng .NET 9"}),"\n",(0,a.jsx)(e.p,{children:"Ch\xfang ta s\u1ebd t\u1ea1o m\u1ed9t \u1ee9ng d\u1ee5ng \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 g\u1eedi v\xe0 nh\u1eadn message qua RabbitMQ."}),"\n",(0,a.jsx)(e.h3,{id:"1-t\u1ea1o-project-net-9",children:"1. T\u1ea1o project .NET 9"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"dotnet new console -n RabbitMQDemo\ncd RabbitMQDemo\ndotnet add package RabbitMQ.Client\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-t\u1ea1o-producer-\u1ee9ng-d\u1ee5ng-g\u1eedi-message",children:"2. T\u1ea1o Producer (\u1ee8ng d\u1ee5ng g\u1eedi message)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",metastring:"Producer/Program.cs",children:'using RabbitMQ.Client;\nusing System.Text;\n\nclass Producer\n{\n    static void Main(string[] args)\n    {\n        // K\u1ebft n\u1ed1i \u0111\u1ebfn RabbitMQ\n        var factory = new ConnectionFactory() \n        { \n            HostName = "localhost",\n            UserName = "guest",\n            Password = "guest"\n        };\n        \n        using var connection = factory.CreateConnection();\n        using var channel = connection.CreateModel();\n        \n        // Khai b\xe1o queue\n        const string queueName = "hello";\n        channel.QueueDeclare(\n            queue: queueName,\n            durable: false,\n            exclusive: false,\n            autoDelete: false,\n            arguments: null);\n        \n        Console.WriteLine("Nh\u1eadp message \u0111\u1ec3 g\u1eedi (nh\u1eadp \'quit\' \u0111\u1ec3 tho\xe1t):");\n        \n        while (true)\n        {\n            var message = Console.ReadLine();\n            if (message?.ToLower() == "quit") break;\n            \n            if (!string.IsNullOrEmpty(message))\n            {\n                var body = Encoding.UTF8.GetBytes(message);\n                channel.BasicPublish(\n                    exchange: "",\n                    routingKey: queueName,\n                    basicProperties: null,\n                    body: body);\n                \n                Console.WriteLine($"\u0110\xe3 g\u1eedi: {message}");\n            }\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"3-t\u1ea1o-consumer-\u1ee9ng-d\u1ee5ng-nh\u1eadn-message",children:"3. T\u1ea1o Consumer (\u1ee8ng d\u1ee5ng nh\u1eadn message)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",metastring:"Consumer/Program.cs",children:'using RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System.Text;\n\nclass Consumer\n{\n    static void Main(string[] args)\n    {\n        // K\u1ebft n\u1ed1i \u0111\u1ebfn RabbitMQ\n        var factory = new ConnectionFactory() \n        { \n            HostName = "localhost",\n            UserName = "guest",\n            Password = "guest"\n        };\n        \n        using var connection = factory.CreateConnection();\n        using var channel = connection.CreateModel();\n        \n        // Khai b\xe1o queue\n        const string queueName = "hello";\n        channel.QueueDeclare(\n            queue: queueName,\n            durable: false,\n            exclusive: false,\n            autoDelete: false,\n            arguments: null);\n        \n        Console.WriteLine("\u0110ang ch\u1edd message...");\n        \n        // T\u1ea1o consumer\n        var consumer = new EventingBasicConsumer(channel);\n        consumer.Received += (model, ea) =>\n        {\n            var body = ea.Body.ToArray();\n            var message = Encoding.UTF8.GetString(body);\n            \n            Console.WriteLine($"Nh\u1eadn \u0111\u01b0\u1ee3c: {message}");\n            \n            // X\xe1c nh\u1eadn \u0111\xe3 x\u1eed l\xfd message\n            channel.BasicAck(ea.DeliveryTag, false);\n        };\n        \n        // B\u1eaft \u0111\u1ea7u nh\u1eadn message\n        channel.BasicConsume(\n            queue: queueName,\n            autoAck: false,\n            consumer: consumer);\n        \n        Console.WriteLine("Nh\u1ea5n Enter \u0111\u1ec3 tho\xe1t");\n        Console.ReadLine();\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"4-s\u1eed-d\u1ee5ng-exchange-v\xe0-routing",children:"4. S\u1eed d\u1ee5ng Exchange v\xe0 Routing"}),"\n",(0,a.jsx)(e.p,{children:"\u0110\xe2y l\xe0 v\xed d\u1ee5 n\xe2ng cao s\u1eed d\u1ee5ng Exchange v\u1edbi routing key:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",metastring:"AdvancedProducer/Program.cs",children:'using RabbitMQ.Client;\nusing System.Text;\n\nclass AdvancedProducer\n{\n    static void Main(string[] args)\n    {\n        var factory = new ConnectionFactory() { HostName = "localhost" };\n        using var connection = factory.CreateConnection();\n        using var channel = connection.CreateModel();\n        \n        // Khai b\xe1o exchange\n        const string exchangeName = "logs";\n        channel.ExchangeDeclare(\n            exchange: exchangeName,\n            type: ExchangeType.Direct);\n        \n        // Khai b\xe1o queues\n        var queueNames = new[] { "error", "warning", "info" };\n        foreach (var queueName in queueNames)\n        {\n            channel.QueueDeclare(queueName, false, false, false, null);\n            channel.QueueBind(queueName, exchangeName, queueName);\n        }\n        \n        Console.WriteLine("Nh\u1eadp message theo format \'level:message\' (v\xed d\u1ee5: error:Database connection failed)");\n        Console.WriteLine("Levels: error, warning, info");\n        \n        while (true)\n        {\n            var input = Console.ReadLine();\n            if (input?.ToLower() == "quit") break;\n            \n            if (input?.Contains(\':\') == true)\n            {\n                var parts = input.Split(\':\', 2);\n                var level = parts[0].Trim().ToLower();\n                var message = parts[1].Trim();\n                \n                if (queueNames.Contains(level))\n                {\n                    var body = Encoding.UTF8.GetBytes(message);\n                    channel.BasicPublish(\n                        exchange: exchangeName,\n                        routingKey: level,\n                        basicProperties: null,\n                        body: body);\n                    \n                    Console.WriteLine($"\u0110\xe3 g\u1eedi {level}: {message}");\n                }\n                else\n                {\n                    Console.WriteLine($"Level kh\xf4ng h\u1ee3p l\u1ec7: {level}");\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"5-consumer-cho-t\u1eebng-lo\u1ea1i-message",children:"5. Consumer cho t\u1eebng lo\u1ea1i message"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",metastring:"AdvancedConsumer/Program.cs",children:'using RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System.Text;\n\nclass AdvancedConsumer\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine("Ch\u1ecdn level \u0111\u1ec3 nh\u1eadn message (error/warning/info):");\n        var level = Console.ReadLine()?.Trim().ToLower();\n        \n        if (string.IsNullOrEmpty(level) || !new[] { "error", "warning", "info" }.Contains(level))\n        {\n            Console.WriteLine("Level kh\xf4ng h\u1ee3p l\u1ec7!");\n            return;\n        }\n        \n        var factory = new ConnectionFactory() { HostName = "localhost" };\n        using var connection = factory.CreateConnection();\n        using var channel = connection.CreateModel();\n        \n        // Khai b\xe1o exchange\n        const string exchangeName = "logs";\n        channel.ExchangeDeclare(\n            exchange: exchangeName,\n            type: ExchangeType.Direct);\n        \n        // Khai b\xe1o queue\n        channel.QueueDeclare(level, false, false, false, null);\n        channel.QueueBind(level, exchangeName, level);\n        \n        Console.WriteLine($"\u0110ang ch\u1edd {level} messages...");\n        \n        var consumer = new EventingBasicConsumer(channel);\n        consumer.Received += (model, ea) =>\n        {\n            var body = ea.Body.ToArray();\n            var message = Encoding.UTF8.GetString(body);\n            \n            Console.WriteLine($"[{level.ToUpper()}] {message}");\n            channel.BasicAck(ea.DeliveryTag, false);\n        };\n        \n        channel.BasicConsume(level, false, consumer);\n        \n        Console.WriteLine("Nh\u1ea5n Enter \u0111\u1ec3 tho\xe1t");\n        Console.ReadLine();\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"c\xe1c-t\xednh-n\u0103ng-n\xe2ng-cao",children:"C\xe1c t\xednh n\u0103ng n\xe2ng cao"}),"\n",(0,a.jsx)(e.h3,{id:"1-message-persistence",children:"1. Message Persistence"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// \u0110\u1ea3m b\u1ea3o queue v\xe0 message \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef\nchannel.QueueDeclare(\n    queue: "persistent-queue",\n    durable: true,  // Queue s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef\n    exclusive: false,\n    autoDelete: false,\n    arguments: null);\n\n// \u0110\u1ea3m b\u1ea3o message \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef\nvar properties = channel.CreateBasicProperties();\nproperties.Persistent = true;\n\nchannel.BasicPublish(\n    exchange: "",\n    routingKey: "persistent-queue",\n    basicProperties: properties,\n    body: body);\n'})}),"\n",(0,a.jsx)(e.h3,{id:"2-acknowledgment",children:"2. Acknowledgment"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// T\u1eaft auto-ack \u0111\u1ec3 x\u1eed l\xfd th\u1ee7 c\xf4ng\nchannel.BasicConsume(\n    queue: "queue-name",\n    autoAck: false,  // T\u1eaft auto-ack\n    consumer: consumer);\n\n// X\xe1c nh\u1eadn message \u0111\xe3 \u0111\u01b0\u1ee3c x\u1eed l\xfd th\xe0nh c\xf4ng\nchannel.BasicAck(deliveryTag, false);\n\n// Ho\u1eb7c t\u1eeb ch\u1ed1i message\nchannel.BasicNack(deliveryTag, false, true);  // true = requeue\n'})}),"\n",(0,a.jsx)(e.h3,{id:"3-dead-letter-exchange",children:"3. Dead Letter Exchange"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// Khai b\xe1o dead letter exchange\nchannel.ExchangeDeclare("dlx", ExchangeType.Direct);\n\n// Khai b\xe1o queue v\u1edbi dead letter exchange\nvar arguments = new Dictionary<string, object>\n{\n    { "x-dead-letter-exchange", "dlx" },\n    { "x-dead-letter-routing-key", "failed" }\n};\n\nchannel.QueueDeclare(\n    queue: "main-queue",\n    durable: false,\n    exclusive: false,\n    autoDelete: false,\n    arguments: arguments);\n'})}),"\n",(0,a.jsx)(e.h2,{id:"l\u1ee3i-\xedch-c\u1ee7a-rabbitmq",children:"L\u1ee3i \xedch c\u1ee7a RabbitMQ"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"\u0110\u1ed9 tin c\u1eady cao"}),": H\u1ed7 tr\u1ee3 message persistence v\xe0 acknowledgment"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Hi\u1ec7u su\u1ea5t t\u1ed1t"}),": X\u1eed l\xfd h\xe0ng ngh\xecn message m\u1ed7i gi\xe2y"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Linh ho\u1ea1t"}),": H\u1ed7 tr\u1ee3 nhi\u1ec1u messaging patterns"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng"}),": D\u1ec5 d\xe0ng th\xeam producer/consumer"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Monitoring"}),": Cung c\u1ea5p web UI \u0111\u1ec3 qu\u1ea3n l\xfd"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"k\u1ebft-lu\u1eadn",children:"K\u1ebft lu\u1eadn"}),"\n",(0,a.jsx)(e.p,{children:"RabbitMQ l\xe0 m\u1ed9t c\xf4ng c\u1ee5 m\u1ea1nh m\u1ebd cho vi\u1ec7c x\xe2y d\u1ef1ng ki\u1ebfn tr\xfac microservices v\xe0 x\u1eed l\xfd message b\u1ea5t \u0111\u1ed3ng b\u1ed9. V\u1edbi .NET 9, vi\u1ec7c t\xedch h\u1ee3p RabbitMQ tr\u1edf n\xean \u0111\u01a1n gi\u1ea3n v\xe0 hi\u1ec7u qu\u1ea3 h\u01a1n bao gi\u1edd h\u1ebft."}),"\n",(0,a.jsx)(e.p,{children:"Trong b\xe0i vi\u1ebft n\xe0y, ch\xfang ta \u0111\xe3 t\xecm hi\u1ec3u:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n v\u1ec1 RabbitMQ"}),"\n",(0,a.jsx)(e.li,{children:"C\xe1ch c\xe0i \u0111\u1eb7t v\xe0 s\u1eed d\u1ee5ng"}),"\n",(0,a.jsx)(e.li,{children:"V\xed d\u1ee5 th\u1ef1c t\u1ebf v\u1edbi .NET 9"}),"\n",(0,a.jsx)(e.li,{children:"C\xe1c t\xednh n\u0103ng n\xe2ng cao"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"\u0110\u1ec3 t\xecm hi\u1ec3u th\xeam, b\u1ea1n c\xf3 th\u1ec3 tham kh\u1ea3o:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://www.rabbitmq.com/documentation.html",children:"RabbitMQ Documentation"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://github.com/rabbitmq/rabbitmq-dotnet-client",children:"RabbitMQ .NET Client"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://www.amqp.org/",children:"AMQP Protocol"})}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Tr\xean \u0111\xe2y l\xe0 m\u1ed9t s\u1ed1 v\xed d\u1ee5 c\u01a1 b\u1ea3n v\u1ec1 RabbitMQ v\xe0 c\xe1ch s\u1eed d\u1ee5ng n\xf3 trong \u1ee9ng d\u1ee5ng .NET 9, hy v\u1ecdng b\u1ea1n th\u1ea5y h\u1eefu \xedch."})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(g,{...n})}):g(n)}},88023:n=>{n.exports=JSON.parse('{"permalink":"/blog/introduction-to-rabbitmq","editUrl":"https://github.com/TienNHM/tiennhm.github.io/tree/master/blog/2025/2025-08-23-gioi-thieu-rabbitmq-net9/index.md","source":"@site/blog/2025/2025-08-23-gioi-thieu-rabbitmq-net9/index.md","title":"Gi\u1edbi thi\u1ec7u RabbitMQ - Message Broker m\u1ea1nh m\u1ebd","description":"T\xecm hi\u1ec3u v\u1ec1 RabbitMQ, m\u1ed9t message broker ph\u1ed5 bi\u1ebfn trong ki\u1ebfn tr\xfac microservices. B\xe0i vi\u1ebft bao g\u1ed3m kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n, c\xe0i \u0111\u1eb7t v\xe0 v\xed d\u1ee5 th\u1ef1c t\u1ebf v\u1edbi .NET 9.","date":"2025-08-23T00:00:00.000Z","tags":[{"inline":true,"label":"rabbitmq","permalink":"/blog/tags/rabbitmq"},{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"microservices","permalink":"/blog/tags/microservices"},{"inline":true,"label":"message-broker","permalink":"/blog/tags/message-broker"},{"inline":true,"label":"net9","permalink":"/blog/tags/net-9"},{"inline":true,"label":"csharp","permalink":"/blog/tags/csharp"}],"readingTime":5.25,"hasTruncateMarker":true,"authors":[{"name":"Nguy\u1ec5n Hu\u1ef3nh Minh Ti\u1ebfn","title":"Fullstack Developer @ Utop.io","url":"https://github.com/TienNHM","imageURL":"https://github.com/TienNHM.png","key":"tiennhm","page":null}],"frontMatter":{"title":"Gi\u1edbi thi\u1ec7u RabbitMQ - Message Broker m\u1ea1nh m\u1ebd","slug":"introduction-to-rabbitmq","description":"T\xecm hi\u1ec3u v\u1ec1 RabbitMQ, m\u1ed9t message broker ph\u1ed5 bi\u1ebfn trong ki\u1ebfn tr\xfac microservices. B\xe0i vi\u1ebft bao g\u1ed3m kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n, c\xe0i \u0111\u1eb7t v\xe0 v\xed d\u1ee5 th\u1ef1c t\u1ebf v\u1edbi .NET 9.","tags":["rabbitmq","dotnet","microservices","message-broker","net9","csharp"],"authors":["tiennhm"],"date":"2025-08-23T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"C\xe1c th\u01b0 vi\u1ec7n UI ph\u1ed5 bi\u1ebfn cho Angular - So s\xe1nh v\xe0 \u0111\xe1nh gi\xe1","permalink":"/blog/frontend-libraries-angular"},"nextItem":{"title":"C\xe1c ki\u1ec3u l\u1eadp tr\xecnh ph\u1ed5 bi\u1ebfn","permalink":"/blog/programming-paradigm"}}')}}]);